version: "3.8"
services:
  # reverse-proxy:
  #   container_name: syntrade-reverse-proxy
  #   image: jwilder/nginx-proxy:latest
  #   volumes:
  #     - certs:/etc/nginx/certs
  #     - vhost:/etc/nginx/vhost.d
  #     - html:/usr/share/nginx/html
  #     - /var/run/docker.sock:/tmp/docker.sock:ro
  #   restart: "always"
  #   ports:
  #     - "80:80"
  #     - "443:443"
  # letsencrypt:
  #   container_name: syntrade-letsencrypt-helper
  #   image: jrcs/letsencrypt-nginx-proxy-companion:latest
  #   volumes:
  #     - acme:/etc/acme.sh
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #   environment:
  #     - NGINX_PROXY_CONTAINER="syntrade-reverse-proxy"
  #     - DEFAULT_EMAIL=${DEFAULT_EMAIL}
  #   restart: "always"
  #   depends_on:
  #     reverse-proxy:
  #       condition: service_started
  #   volumes_from:
  #     - reverse-proxy
  app:
    container_name: syntrade-backend
    build:
      context: .
      dockerfile: Dockerfile.backend
    image: syntrade-backend
    restart: always
    # environment:
    #   - VIRTUAL_HOST="api.syntrade.xyz"
    #   - LETSENCRYPT_HOST="api.syntrade.xyz"
    #   - VIRTUAL_PROTO="https"
    #   - VIRTUAL_PORT="443"
    depends_on:
      # letsencrypt:
      #   condition: service_started
      postgres:
        condition: service_started
      redis:
        condition: service_started
      flask:
        condition: service_started
    ports:
      - "4000:4000"
    env_file:
      - .env
    volumes:
      - "./app:/usr/src/app"
    command: npm run dev
  postgres:
    container_name: syntrade-database
    image: postgres:10.3
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    env_file:
      - .env
    # depends_on:
    #   letsencrypt:
    #     condition: service_started
  redis:
    container_name: syntrade-cache
    image: redis:6.2-alpine
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    volumes:
      - ./redis:/data
    # depends_on:
    #   letsencrypt:
    #     condition: service_started
  flask:
    container_name: syntrade-pricing
    build:
      context: .
      dockerfile: Dockerfile.pricing
    image: syntrade-pricing
    restart: always
    # environment:
    #   - VIRTUAL_HOST="pricing.syntrade.xyz"
    #   - LETSENCRYPT_HOST="pricing.syntrade.xyz"
    #   - VIRTUAL_PROTO="https"
    #   - VIRTUAL_PORT="443"
    ports:
      - "5000:5000"
    expose:
      - "5000"
    env_file:
      - .env
    volumes:
      - "./pricing:/usr/src/pricing"
    command: gunicorn app:app --worker-class gevent --bind 0.0.0.0:5000
    # depends_on:
    #   letsencrypt:
    #     condition: service_started
volumes:
  app:
  postgres:
  redis:
  flask:
  # certs:
  # html:
  # vhost:
  # dhparam:
  # acme:
networks:
  default:
    name: syntrade-network
    driver: bridge
    external: true
